/* ---------------------------------- *\
  #COLOUR SETTINGS
 Set up a colour palette which allows us to theme the entire project from one location
\* ---------------------------------- */
/* ----------------------------------
    #MEDIA QUERY SETTINGS

    Sets baseline Media Queries which correlate with some of the popular viewports.
    Adjust where necessary and add/remove if needed.
    Apply mixin from tools/mq

    Usage:
    @include mq($mq-mob, min) { ... };

---------------------------------- */
/* ----------------------------------*\
    #SPACING SETTINGS
\*---------------------------------- */
/* ----------------------------------
    #TYPOGRAPHY SETTINGS
---------------------------------- */
/* ----------------------------------
    #Z-INDEX SETTINGS

    Z-index mapping: Correctly place your variable in the correct position
    based on what it should appear above and behind.
    Utilises mixin from tools/zindex

    Usage:
    $z-index: (
        "header",
        "navigation",
        "footer",
    );

    @include z-index(header);

---------------------------------- */
/* ----------------------------------
    #FONT-SIZE

    PX to REM for font-sizes and line-height
    Line height is relative to the cascade - ideally inherited from the <body> but can be overridden.

    Usage:

    @include font-size($size-alpha);
    @include font-size($size-alpha, $line-height); overrides line-height

---------------------------------- */
/* ----------------------------------
    #Z-INDEX

    Mixin to streamline the mapping of your z-index
    Takes the index of your key and applies this as your z-index value
    Is applied in settings/zindex

---------------------------------- */
.testimonials {
  padding: 20px 0px;
  background-color: #F2F2F2;
}
@media screen and (min-width: 820px) {
  .testimonials {
    padding: 60px 0px;
  }
}

.c-testimonials {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
}
.c-testimonials__title {
  margin-bottom: 2.4rem;
}
@media screen and (min-width: 820px) {
  .c-testimonials__title {
    margin-bottom: 4.8rem;
    color: #000;
    font-family: "Oswald", sans-serif;
    font-size: 2.2rem;
    font-weight: 400;
    line-height: 26.4px;
    letter-spacing: 0.15em;
  }
}
.c-testimonials__list {
  display: flex;
  width: 100%;
  height: 100%;
  margin-bottom: 2.4rem;
}
@media screen and (min-width: 820px) {
  .c-testimonials__list {
    margin-bottom: 4.8rem;
  }
}
.c-testimonials__item {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  min-height: 200px;
  margin: auto;
  margin-right: 20px;
  padding: 0 25px;
}
@media screen and (min-width: 820px) {
  .c-testimonials__item {
    width: 33.33%;
    padding: 0 10px;
  }
}
.c-testimonials__item-title {
  font-family: "Oswald", sans-serif;
  color: #000;
  font-size: 2.8rem;
  font-weight: 700;
  line-height: 36px;
  margin-bottom: 2.4rem;
  text-transform: uppercase;
}
@media screen and (min-width: 820px) {
  .c-testimonials__item-title {
    max-width: 240px;
  }
}
.c-testimonials__item-content {
  color: #000;
  font-family: "Montserrat", sans-serif;
  font-size: 1.4rem;
  font-weight: 500;
  line-height: 21px;
  letter-spacing: 0.05em;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/