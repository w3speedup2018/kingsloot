/* ---------------------------------- *\
  #COLOUR SETTINGS
 Set up a colour palette which allows us to theme the entire project from one location
\* ---------------------------------- */
/* ----------------------------------
    #MEDIA QUERY SETTINGS

    Sets baseline Media Queries which correlate with some of the popular viewports.
    Adjust where necessary and add/remove if needed.
    Apply mixin from tools/mq

    Usage:
    @include mq($mq-mob, min) { ... };

---------------------------------- */
/* ----------------------------------*\
    #SPACING SETTINGS
\*---------------------------------- */
/* ----------------------------------
    #TYPOGRAPHY SETTINGS
---------------------------------- */
/* ----------------------------------
    #Z-INDEX SETTINGS

    Z-index mapping: Correctly place your variable in the correct position
    based on what it should appear above and behind.
    Utilises mixin from tools/zindex

    Usage:
    $z-index: (
        "header",
        "navigation",
        "footer",
    );

    @include z-index(header);

---------------------------------- */
/* ----------------------------------
    #FONT-SIZE

    PX to REM for font-sizes and line-height
    Line height is relative to the cascade - ideally inherited from the <body> but can be overridden.

    Usage:

    @include font-size($size-alpha);
    @include font-size($size-alpha, $line-height); overrides line-height

---------------------------------- */
/* ----------------------------------
    #Z-INDEX

    Mixin to streamline the mapping of your z-index
    Takes the index of your key and applies this as your z-index value
    Is applied in settings/zindex

---------------------------------- */
.c-home-banner {
  position: relative;
  margin-top: 40px;
}
@media screen and (min-width: 820px) {
  .c-home-banner {
    margin-top: 0px;
  }
}
.c-home-banner__container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  margin: 2.4rem 0 3.6rem;
}
@media screen and (min-width: 820px) {
  .c-home-banner__container {
    position: absolute;
    top: 0;
    left: 0;
    margin-top: 0;
  }
}
.c-home-banner__inner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
}
.c-home-banner__content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
}
@media screen and (min-width: 820px) {
  .c-home-banner__content.right {
    align-items: flex-end;
  }
  .c-home-banner__content.center {
    align-items: center;
  }
  .c-home-banner__content.left {
    align-items: flex-start;
  }
}
.c-home-banner__title {
  margin-bottom: 2.4rem;
  color: #000;
  font-family: "Oswald", sans-serif;
  font-size: 3.8rem;
  font-weight: 600;
  line-height: 1.4;
  text-align: center;
  text-transform: uppercase;
}
@media screen and (min-width: 820px) {
  .c-home-banner__title {
    margin-bottom: 4.8rem;
    font-size: 5rem;
    line-height: 60px;
  }
}
.c-home-banner__title.box {
  padding: 0px 10px;
  background-color: #000;
  color: #fff;
}
@media screen and (min-width: 820px) {
  .c-home-banner__title.box {
    padding: 0px 10px 5px;
  }
}
.c-home-banner__desc {
  width: 100%;
  margin-bottom: 1.8rem;
  color: #000;
  font-family: "Montserrat", sans-serif;
  font-size: 1.6rem;
  font-weight: 400;
  line-height: 1.5;
  letter-spacing: 0.05em;
  text-align: center;
}
@media screen and (min-width: 820px) {
  .c-home-banner__desc {
    max-width: 350px;
    margin-bottom: 4.8rem;
    text-align: var(--text-align);
  }
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/