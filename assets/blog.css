/* ---------------------------------- *\
  #COLOUR SETTINGS
 Set up a colour palette which allows us to theme the entire project from one location
\* ---------------------------------- */
/* ----------------------------------
    #MEDIA QUERY SETTINGS

    Sets baseline Media Queries which correlate with some of the popular viewports.
    Adjust where necessary and add/remove if needed.
    Apply mixin from tools/mq

    Usage:
    @include mq($mq-mob, min) { ... };

---------------------------------- */
/* ----------------------------------*\
    #SPACING SETTINGS
\*---------------------------------- */
/* ----------------------------------
    #TYPOGRAPHY SETTINGS
---------------------------------- */
/* ----------------------------------
    #Z-INDEX SETTINGS

    Z-index mapping: Correctly place your variable in the correct position
    based on what it should appear above and behind.
    Utilises mixin from tools/zindex

    Usage:
    $z-index: (
        "header",
        "navigation",
        "footer",
    );

    @include z-index(header);

---------------------------------- */
/* ----------------------------------
    #FONT-SIZE

    PX to REM for font-sizes and line-height
    Line height is relative to the cascade - ideally inherited from the <body> but can be overridden.

    Usage:

    @include font-size($size-alpha);
    @include font-size($size-alpha, $line-height); overrides line-height

---------------------------------- */
/* ----------------------------------
    #Z-INDEX

    Mixin to streamline the mapping of your z-index
    Takes the index of your key and applies this as your z-index value
    Is applied in settings/zindex

---------------------------------- */
.c-blog-inner__articles {
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  grid-gap: 25px;
}
@media screen and (min-width: 820px) {
  .c-blog-inner__articles {
    grid-template-columns: repeat(3, 1fr);
  }
}
.c-blog-inner__title--heading {
  text-transform: uppercase;
  text-align: center;
  font-weight: 600;
  color: #000;
  margin-bottom: 24px;
  margin-top: 36px;
}

.c-featured-articles__inner {
  display: flex;
  flex-flow: row wrap;
  margin: 0 -2.4rem;
}
@media screen and (min-width: 820px) {
  .c-featured-articles__inner {
    margin: 0 -3.2rem;
  }
}
.c-featured-articles__top {
  height: auto;
}
.c-featured-articles__item {
  position: relative;
}
.c-featured-articles__item-image {
  aspect-ratio: 1.9;
  margin-bottom: 10px;
}
.c-featured-articles__item-image .o-img {
  -o-object-fit: contain;
     object-fit: contain;
}
.c-featured-articles__item-title {
  text-align: center;
  color: #000;
  font-weight: 600;
  text-transform: uppercase;
  font-size: 18px;
  line-height: 21px;
  margin-bottom: 10px;
}
.c-featured-articles__item-guide {
  text-align: center;
  font-weight: 400;
  font-size: 14px;
  line-height: 16.8px;
}
.c-featured-articles__button {
  width: 100%;
}
@media screen and (min-width: 1024px) {
  .c-featured-articles__button {
    width: auto;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/