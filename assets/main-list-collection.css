/* ---------------------------------- *\
  #COLOUR SETTINGS
 Set up a colour palette which allows us to theme the entire project from one location
\* ---------------------------------- */
/* ----------------------------------
    #MEDIA QUERY SETTINGS

    Sets baseline Media Queries which correlate with some of the popular viewports.
    Adjust where necessary and add/remove if needed.
    Apply mixin from tools/mq

    Usage:
    @include mq($mq-mob, min) { ... };

---------------------------------- */
/* ----------------------------------*\
    #SPACING SETTINGS
\*---------------------------------- */
/* ----------------------------------
    #TYPOGRAPHY SETTINGS
---------------------------------- */
/* ----------------------------------
    #Z-INDEX SETTINGS

    Z-index mapping: Correctly place your variable in the correct position
    based on what it should appear above and behind.
    Utilises mixin from tools/zindex

    Usage:
    $z-index: (
        "header",
        "navigation",
        "footer",
    );

    @include z-index(header);

---------------------------------- */
/* ----------------------------------
    #FONT-SIZE

    PX to REM for font-sizes and line-height
    Line height is relative to the cascade - ideally inherited from the <body> but can be overridden.

    Usage:

    @include font-size($size-alpha);
    @include font-size($size-alpha, $line-height); overrides line-height

---------------------------------- */
/* ----------------------------------
    #Z-INDEX

    Mixin to streamline the mapping of your z-index
    Takes the index of your key and applies this as your z-index value
    Is applied in settings/zindex

---------------------------------- */
.c-list-collection {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-top: 4.8rem;
}
@media screen and (min-width: 820px) {
  .c-list-collection {
    width: calc(100% + 40px);
    margin-left: -20px;
  }
}
.c-list-collection__item {
  width: 100%;
  margin-bottom: 24px;
}
@media screen and (min-width: 820px) {
  .c-list-collection__item {
    width: 50%;
    margin-bottom: 40px;
    padding: 0 20px;
  }
  .c-list-collection__item:nth-child(3n) {
    width: 100%;
  }
}
.c-list-collection__item .o-img__frame {
  max-height: 450px;
  filter: brightness(0.9);
}
.c-list-collection__item .o-img__frame img {
  height: 100%;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/